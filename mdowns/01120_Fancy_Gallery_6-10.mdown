Fancy Gallery 6-10
------------------

Gallery No.6
------------
I found the Ruby Quiz solution with Shoes. 

[Ruby Quiz 197 Midpoint Displacement](http://rubyquiz.strd6.com/quizzes/197/)

Fantastic mountain! So, let me try to write my own Shoes app.

Look at [online demo](http://www.rin-shun.com/rubylearning/shoes/midpoint_displacement.swf.html).

	# gallery6.rb
	# Ruby Quiz 197 Midpoint Displacement
	# http://rubyquiz.strd6.com/quizzes/197/
	require 'enumerator'
	POINTS = [[600, 0], [0, 0], [0, 220]]
	
	Shoes.app :title => 'Midpoint Displacement v0.1'do  
	  def midpoint_displacement
	    create_stars
	    points = [[0, 220], [600, 220]]
	    n = 2
	      
	    mk_midpoints = proc do
	      tmp = [points[0]]
	      n /= 2.0
	      points.each_cons 2 do |x1, x2|
	        n_rand = n * 2 * rand - n
	        n_rand = n_rand.abs if n == 1
	        y = (x1[1] + x2[1]) / 2.0  
	        tmp << [(x1[0] + x2[0]) / 2.0, y + y * n_rand] << x2
	      end
	      points = tmp
	    end
	      
	    t = every 1 do |i|
	      @mt.remove if @mt
	      mk_midpoints.call
	      @mt = shape :top => 100 do
	        (points+POINTS).each_with_index do |e, j|
	          x, y = e
	          move_to(x, y) if j == 0
	          line_to x, 400 - y
	        end
	      end
	      t.stop if i > 7
	    end
	  end
	  
	  def position radius, t
	    angle = 2 * Math::PI * t / (24 * 60) - Math::PI / 2
	    x, y = 300 + radius * Math.cos(angle), 250 + radius * Math.sin(angle)
	    [x.to_i, y.to_i]
	  end  
	  
	  def create_stars
	    50.times do
	      r, t = rand(300), rand(24 * 60)
	      x, y = position(r, t)
	      @stars << star(x, y, 5, outer = 1 + rand(10), outer / 2, :fill => white, 
	                     :stroke => white, :r => r, :t => t)
	    end
	    @a = animate(24){|i| move_stars i}
	  end
	  
	  def move_stars i
	    @stars.each do |s|
	      x, y = position(s.style[:r], s.style[:t] + i)
	      s.style :left => x, :top => y
	    end
	  end
	  
	  background teal..white
	  @stars = []
	  midpoint_displacement
	  
	  button 'one more time' do
	    (@stars + [@a, @mt]).each{|s| s.remove}
	    midpoint_displacement
	  end
	end

**gallery6.png**

![gallery6.png](http://github.com/ashbb/shoes_tutorial_html/raw/master/images/gallery6.png)



Gallery No.7
------------
The Game Snake. It's a very nice tutorial.   
[Let's Make a Game: Wrap Up](http://quiteuseful.co.uk/post/94473551/lets-make-a-game-wrap-up)

I was really inspired and wrote the following **55 lines Snake in Shoes**.   
It's a power of Shoes! ;-)

Look at [online demo](http://www.rin-shun.com/rubylearning/shoes/snake.swf.html)

	# gallery7.rb
	# 55 lines Snake in Shoes
	class SnakeGame < Shoes
	  url '/', :index
	  
	  def index
	    background black
	    game_start
	  end
	  
	  def game_start
	    @score = para 'Score:', :stroke => white
	    @pos = {:up => [0, -10], :down => [0, 10], :left => [-10, 0], :right => [10, 0]}
	    @rx, @ry = proc{20 + 10*rand(56)}, proc{40 + 10*rand(44)}
	    
	    @foods = []
	    stroke lime
	    50.times{@foods << rect(@rx[], @ry[], 10, 10)}
	    
	    @bricks = []
	    stroke deepskyblue; fill '#000099'
	    50.times{@bricks << rect(@rx[], @ry[], 10, 10)}
	    20.step(570, 10){|n| @bricks << rect(n, 40, 10, 10) << rect(n, 470, 10, 10)}
	    40.step(470, 10){|n| @bricks << rect(10, n, 10, 10) << rect(570, n, 10, 10)}
	    
	    @snake = []
	    stroke white; nofill
	    @snake << rect(300, 100, 10, 10)
	    @snake[0].stroke = red
	    
	    dir = :left
	    @run  = animate 5 do
	      keypress{|k| dir = k if @pos.keys.include? k}
	      check_food
	      go dir
	      @score.text = "Score: #{@snake.length * 10}"
	      brick? @snake[0]
	    end
	  end
	  
	  def go k
	    x, y = @pos[k]
	    @snake.unshift @snake.pop
	    n = @snake.length > 1 ? 1 : 0
	    @snake[0].move @snake[n].left + x, @snake[n].top + y
	    @snake[0].stroke, @snake[n].stroke = @snake[n].stroke, @snake[0].stroke
	  end
	  
	  def check_food
	    (@snake << rect(0, 0, 10, 10)) if eat? @snake[0]
	  end
	  
	  def eat? s
	    @foods.each_with_index do |f, i|
	      (f.move @rx[], @ry[]; return true) if f.left == s.left and f.top == s.top
	    end
	    return false
	  end
	  
	  def brick? s
	    @bricks.each do |b|
	      (@run.stop; confirm('Game Over. Play again?') ? visit('/') : exit) \
	        if b.left == s.left and b.top == s.top      
	    end
	  end
	end
	
	Shoes.app :title => 'Snake Game v0.1'

**gallery7.png**

![gallery7.png](http://github.com/ashbb/shoes_tutorial_html/raw/master/images/gallery7.png)


Gallery No.8
------------
Paul Harris introduced the following fancy Shoes app in the Shoes course 4th batch.

- [Parallax Scrolling](http://www.mail-archive.com/shoes@code.whytheluckystiff.net/msg03230.html) (Shoes ML Archive)
- [Parallax Scrolling](http://en.wikipedia.org/wiki/Parallax_scrolling) (Wikipedia)

I was very impressed and then improved to move a bit more smoothly.

Look at [online demo](http://www.rin-shun.com/rubylearning/shoes/parallax_scroll.swf.html)

	# gallery8.rb
	Shoes.app :width=>320, :height=>200 do
	  str = "../images/Parallax-scroll-example-layer-%s.gif"
	  imgs = []
	  4.times do |i|
	    path = str % i
	    imgs << [image(path), image(path), imagesize(path).first]
	  end
	 
	  animate 24 do |i|
	    imgs.each_with_index do |e, n|
	      img1, img2, w = e
	      x = -(n * i % w)
	      img1.move x, 0
	      img2.move x + w, 0
	    end
	  end
	end

**gallery8.png**

![gallery8.png](http://github.com/ashbb/shoes_tutorial_html/raw/master/images/gallery8.png)

**NOTE**   
If you have the faster machine than mine. It might be occured this error:
 
- undefined method `first` for nil:NilClass

If it'll happen, try to modify the code, line 7, like this:

	width = imagesize(path).first
	fs << [image(path), image(path), width]

*This tip was presented by Paul Harris*.
