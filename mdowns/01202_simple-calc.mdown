simple-calc
-----------
**simple-calc.png**

![simple-calc.png](http://github.com/ashbb/shoes_tutorial_html/raw/master/images/simple-calc.png)

# simple-calc.rb



Study Note
----------
\#1: <br>
Define a class Calc. This class has the following 18 methods.
- initialize
- to\_s
- press\_0, press\_1, ..... , press\_9
- press\_clear
- press\_add, press\_sub, press\_times, press\_div
- press\_equal  

\#2: <br>
Define a method initialize. This method is used once in the above code to create just one object at #9. 

\#3: <br>
Define a method to\_s. In Shoes, para uses to\_s implicitly at #10. If you comment out to\_s definition lines, you will see the following output.

**simple-calc-1.png**

![simple-calc-1.png](http://github.com/ashbb/shoes_tutorial_html/raw/master/images/simple-calc-1.png)

\#4: <br>
Define methods press\_0, press\_1, ..... , press\_9 with the method `define_method`. See `ri Module#define_method`. They are the same as the following.

	def press_0
	  @number = @number.to_i * 10 + n
	end
	def press_1
	  @number = @number.to_i * 10 + 1
	end
	         :
	         : (and so on)

The `.to_i` is necessary for the case that @number is nil.

\#5: <br>
Define methods press\_add, press\_sub, press\_times, press\_div. 

\#6: <br>
Execute the previous calculation (one of +, -, *, /).

\#7: <br>
To clear the `number_field` at #13 (to show nothing), assign nil to `@number` instead of 0.

\#8: <br>
Define a method press\_equals. See the following small IRB snippet.

	C:\>irb --simple-prompt
	>> 23.send '+', 5
	=> 28

\#12: <br>
Send the value (character string) that was assigned to the local variable `method` to the object `number` that was created at #9. See the following small IRB snippet.

	C:\>irb --simple-prompt
	>> class Calc
	>>   def press_add
	>>     puts 'DEBUG: hi.'
	>>   end
	>> end
	=> nil
	>> Calc.new.send 'press_add'
	DEBUG: hi.
	=> nil
	>>

\#13: <br>
This line is defined within the button definition block (#11), hence every time when any button is clicked, `number_field` area will be refreshed.


Alternative Simple Calc
-----------------------
This is an alternative code. There is no interesting tips but it's simple, I guess. :)

	#sample61.rb
	Shoes.app :height => 250, :width => 200, :resizable => false do
	  def do_calc
	    @number = @previous.send(@op, @number)  if @op
	    @op = nil
	  end
	  
	  @previous, @number, @op = 0, 0, nil
	  
	  background "#EEC".."#996", :curve => 5, :margin => 2
	
	  stack :margin => 2 do
	    stack :margin => 8 do
	      @number_field = para strong(@number)
	    end
	
	    flow :width => 218, :margin => 4 do
	      %w(7 8 9 / 4 5 6 * 1 2 3 - 0 Clr = +).each do |btn|
	        button btn, :width => 46, :height => 46 do
	          case btn
	            when /[0-9]/
	              @number = @number.to_i * 10 + btn.to_i
	            when 'Clr'
	              @previous, @number, @op = 0, 0, nil
	            when '='
	              do_calc
	            else
	              do_calc
	              @previous, @number = @number, nil
	              @op = btn
	          end      
	          @number_field.replace strong @number
	        end
	      end
	    end
	  end
	end


Policeman
---------

Replaced `:` to `;` for Ruby 1.9. Then the simple-calc.rb worked well with Shoes-0.r1263.


